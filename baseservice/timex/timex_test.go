package timex

import (
	"fmt"
	"testing"
	"time"
)

func TestName(t *testing.T) {
	now := NewNow()
	// fmt.Println("FormatTime =>", now.FormatTime())
	// fmt.Println("BeginningOfWeek =>", now.BeginningOfWeek().Format(DefaultTimeFormat))
	// fmt.Println("NextWeek =>", now.NextWeek().Format(DefaultTimeFormat))
	Fmt(now)
	// Fmt(NewTimeX(time.Time{}))
	// now := time.Now()
	// time.Sleep(time.Second)
	// fmt.Println(SinceFmt(now))
	// SincePrint(now)
}

func TestLocation(t *testing.T) {
	now := time.Now().Unix()
	fmt.Println(now)
	fmt.Println(time.Unix(now, 0).In(time.Local).Format(time.RFC3339Nano))
	fmt.Println(time.Unix(now, 0).In(time.UTC).Format(time.RFC3339Nano))
}

func Fmt(x *TimeX) {
	fmt.Println("Unix =>", x.Unix())
	fmt.Println("UnixNano =>", x.UnixNano())
	fmt.Println("FormatDay =>", x.FormatDay())
	fmt.Println("FormatTime =>", x.FormatTime())
	fmt.Println()
	fmt.Println("BeginningOfDay =>", x.BeginningOfDay().Format(DefaultTimeFormat))
	fmt.Println("BeginningOfDayUnix =>", x.BeginningOfDayUnix())
	fmt.Println("NextDay =>", x.NextDay().Format(DefaultTimeFormat))
	fmt.Println("NextDayUnix =>", x.NextDayUnix())
	fmt.Println("EndOfDay =>", x.EndOfDay().Format(DefaultTimeFormat))
	fmt.Println("EndOfDayUnix =>", x.EndOfDayUnix())
	fmt.Println("DayUseTime =>", x.DayUseTime())
	fmt.Println("DayLaveTime =>", x.DayLeftTime())
	fmt.Println()
	fmt.Println("BeginningOfMonth =>", x.BeginningOfMonth().Format(DefaultTimeFormat))
	fmt.Println("BeginningOfMonthUnix =>", x.BeginningOfMonthUnix())
	fmt.Println("NextMonth =>", x.NextMonth().Format(DefaultTimeFormat))
	fmt.Println("NextMonthUnix =>", x.NextMonthUnix())
	fmt.Println("EndOfMonth =>", x.EndOfMonth().Format(DefaultTimeFormat))
	fmt.Println("EndOfMonthUnix =>", x.EndOfMonthUnix())
	fmt.Println("MonthUseTime =>", x.MonthUseTime())
	fmt.Println("MonthLeftTime =>", x.MonthLeftTime())
	fmt.Println()
	fmt.Println("BeginningOfWeek =>", x.BeginningOfWeek().Format(DefaultTimeFormat))
	fmt.Println("BeginningOfWeekUnix =>", x.BeginningOfWeekUnix())
	fmt.Println("NextWeek =>", x.NextWeek().Format(DefaultTimeFormat))
	fmt.Println("NextWeekUnix =>", x.NextWeekUnix())
	fmt.Println("EndOfWeek =>", x.EndOfWeek().Format(DefaultTimeFormat))
	fmt.Println("EndOfWeekUnix =>", x.EndOfWeekUnix())
	fmt.Println("WeekUseTime =>", x.WeekUseTime())
	fmt.Println("WeekLeftTime =>", x.WeekLeftTime())
	fmt.Println()
	fmt.Println("BeginningOfHour =>", x.BeginningOfHour().Format(DefaultTimeFormat))
	fmt.Println("BeginningOfHourUnix =>", x.BeginningOfHourUnix())
	fmt.Println("NextHour =>", x.NextHour().Format(DefaultTimeFormat))
	fmt.Println("NextHourUnix =>", x.NextHourUnix())
	fmt.Println("EndOfHour =>", x.EndOfHour().Format(DefaultTimeFormat))
	fmt.Println("EndOfHourUnix =>", x.EndOfHourUnix())
	fmt.Println("HourUseTime =>", x.HourUseTime())
	fmt.Println("HourLeftTime =>", x.HourLeftTime())
	fmt.Println()
	fmt.Println("BeginningOfMinute =>", x.BeginningOfMinute().Format(DefaultTimeFormat))
	fmt.Println("BeginningOfMinuteUnix =>", x.BeginningOfMinuteUnix())
	fmt.Println("NextMinute =>", x.NextMinute().Format(DefaultTimeFormat))
	fmt.Println("NextMinuteUnix =>", x.NextMinuteUnix())
	fmt.Println("EndOfMinute =>", x.EndOfMinute().Format(DefaultTimeFormat))
	fmt.Println("EndOfMinuteUnix =>", x.EndOfMinuteUnix())
	fmt.Println("MinuteUseTime =>", x.MinuteUseTime())
	fmt.Println("MinuteLeftTime =>", x.MinuteLeftTime())
	fmt.Println()
	fmt.Println("BeginningOfYear =>", x.BeginningOfYear().Format(DefaultTimeFormat))
	fmt.Println("BeginningOfYearUnix =>", x.BeginningOfYearUnix())
	fmt.Println("NextYear =>", x.NextYear().Format(DefaultTimeFormat))
	fmt.Println("NextYearUnix =>", x.NextYearUnix())
	fmt.Println("EndOfYear =>", x.EndOfYear().Format(DefaultTimeFormat))
	fmt.Println("EndOfYearUnix =>", x.EndOfYearUnix())
	fmt.Println("YearUseTime =>", x.YearUseTime())
	fmt.Println("YearLeftTime =>", x.YearLeftTime())
	fmt.Println()
	fmt.Println("Zero =>", x.Zero())
}
